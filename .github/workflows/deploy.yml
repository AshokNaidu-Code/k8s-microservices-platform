# .github/workflows/deploy.yml

name: K8s Platform Deployment

on:
  workflow_dispatch:
  # Uncomment to trigger on push:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'infrastructure/**'
  #     - '.github/workflows/deploy.yml'

jobs:
  # ===================================================================
  # Job 1: Provision Infrastructure with Terraform
  # ===================================================================
  provision_infra:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0

    - name: Create SSH Key Files
      run: |
        mkdir -p /tmp/.ssh
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > /tmp/.ssh/id_rsa.pub
        chmod 644 /tmp/.ssh/id_rsa.pub

    - name: Terraform Init
      run: terraform -chdir=infrastructure init

    - name: Terraform Plan
      run: |
        cd infrastructure
        terraform plan -out=tfplan


    - name: Terraform Apply
      env:
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      run: |
        cd infrastructure
        echo "SSH_PUBLIC_KEY snippet: ${TF_VAR_ssh_public_key:0:20}..."
        
        terraform apply -auto-approve tfplan
      

    - name: Get Infrastructure IPs
      id: tf_output
      run: |
        cd infrastructure
        CP_IP=$(terraform output -raw control_plane_ip)
        WORKER_IPS=$(terraform output -json worker_ips | jq -r '.[]' | paste -sd ',' -)
        echo "control_plane_ip=$CP_IP" >> $GITHUB_OUTPUT
        echo "worker_ips=$WORKER_IPS" >> $GITHUB_OUTPUT

    outputs:
      control_plane_ip: ${{ steps.tf_output.outputs.control_plane_ip }}
      worker_ips: ${{ steps.tf_output.outputs.worker_ips }}

  # ===================================================================
  # Job 2: Bootstrap Kubernetes Cluster with Ansible
  # ===================================================================
  bootstrap_cluster:
    needs: provision_infra
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Install Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible

    - name: Generate Ansible Inventory
      run: |
        CP_IP="${{ needs.provision_infra.outputs.control_plane_ip }}"
        WORKER_IPS="${{ needs.provision_infra.outputs.worker_ips }}"
        
        cat > cluster-bootstrap/inventory.ini << EOF
        [control_plane]
        $CP_IP ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa
        
        [workers]
        EOF
        
        for ip in $(echo $WORKER_IPS | tr ',' ' '); do
          echo "$ip ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/id_rsa" >> cluster-bootstrap/inventory.ini
        done

    - name: Run Ansible Playbook
      run: |
        ansible-playbook \
          -i cluster-bootstrap/inventory.ini \
          cluster-bootstrap/k8s_setup.yaml \
          -u ubuntu \
          -e "ansible_python_interpreter=/usr/bin/python3" \
          -e "ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'"

  # ===================================================================
  # Job 3: Deploy Applications & Monitoring
  # ===================================================================
  deploy_services:
    needs: [provision_infra, bootstrap_cluster]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup SSH Key for SCP
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Retrieve Kubeconfig
      run: |
        CP_IP="${{ needs.provision_infra.outputs.control_plane_ip }}"
        scp -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i ~/.ssh/id_rsa \
            ubuntu@$CP_IP:~/.kube/config ./kubeconfig.yaml
        chmod 600 ./kubeconfig.yaml

    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.29.15'

    - name: Deploy Microservices
      env:
        KUBECONFIG: ./kubeconfig.yaml
      run: |
        kubectl apply -k services/
        kubectl apply -k autoscaling/
        kubectl apply -k ingress/
        kubectl apply -k storage/
        kubectl apply -k monitoring/

    - name: Verify Deployments
      env:
        KUBECONFIG: ./kubeconfig.yaml
      run: |
        echo "Waiting for pods to be ready..."
        kubectl wait --for=condition=Ready pod -l app=microservices-platform -A --timeout=300s || true
        
        echo "All Nodes:"
        kubectl get nodes
        
        echo "All Pods:"
        kubectl get pods -A
